#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Check a stream for saturation
#
# Copyright © 2016-2020 Deutsches Elektronen-Synchrotron DESY,
#                       a research centre of the Helmholtz Association.
# Copyright © 2016      The Research Foundation for SUNY
#
# Authors:
#   2016-2017 Thomas White <taw@physics.org>
#   2014-2016 Thomas Grant <tgrant@hwi.buffalo.edu>
#
# This file is part of CrystFEL.
#
# CrystFEL is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CrystFEL is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CrystFEL.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import argparse
import math as m
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm
from collections import defaultdict 


def c2(a):
    return m.cos(a) * m.cos(a)

def s2(a):
    return m.sin(a) * m.sin(a)

# Return 1/d for hkl in cell, in 1/Angstroms
def resolution(scell, shkl):

    a = float(scell[0])*10.0
    b = float(scell[1])*10.0
    c = float(scell[2])*10.0  # nm -> Angstroms

    al = m.radians(float(scell[3]))
    be = m.radians(float(scell[4]))
    ga = m.radians(float(scell[5])) # in degrees

    h = int(shkl[0])
    k = int(shkl[1])
    l = int(shkl[2])

    pf = 1.0 - c2(al) - c2(be) - c2(ga) + 2.0*m.cos(al)*m.cos(be)*m.cos(ga)
    n1 = h*h*s2(al)/(a*a) + k*k*s2(be)/(b*b) + l*l*s2(ga)/(c*c)
    n2a = 2.0*k*l*(m.cos(be)*m.cos(ga) - m.cos(al))/(b*c)
    n2b = 2.0*l*h*(m.cos(ga)*m.cos(al) - m.cos(be))/(c*a)
    n2c = 2.0*h*k*(m.cos(al)*m.cos(be) - m.cos(ga))/(a*b)

    return m.sqrt((n1 + n2a + n2b + n2c) / pf)



parser = argparse.ArgumentParser()
parser.add_argument("-i", default="my.stream", help="stream filename")

parser.add_argument("--rmin", type=float, help="minimum resolution cutoff (1/d in Angstroms^-1)")
parser.add_argument("--rmax", type=float, help="maximum resolution cutoff (1/d in Angstroms^-1)")
parser.add_argument("--imin", type=float, help="minimum peak intensity cutoff")
parser.add_argument("--imax", type=float, help="maximum peak intensity cutoff")
parser.add_argument("--nmax", default=np.inf, type=int, help="maximum number of peaks to read")

args = parser.parse_args()


#streams = ['/asap3/petra3/gpfs/p11/2021/data/11010507/scratch_cc/galchenm/raw-processed/20210916_6944-20210916_6946-lys-ont-tape-2s/j_stream/xg-20210916_6944-20210916_6946-lys-ont-tape-2s-199p6mm.stream', '/asap3/petra3/gpfs/p11/2021/data/11010507/scratch_cc/galchenm/raw-processed/20210916_6940-20210916_6941-lys-ont-tape-4s/j_stream/xg-20210916_6940-20210916_6941-lys-ont-tape-4s-199p6mm.stream', '/asap3/petra3/gpfs/p11/2021/data/11010507/scratch_cc/galchenm/raw-processed/20210916_6947-20210916_6948-lys-ont-tape-6s/j_stream/xg-20210916_6947-20210916_6948-lys-ont-tape-6s-199p6mm.stream', '/asap3/petra3/gpfs/p11/2021/data/11010507/scratch_cc/galchenm/raw-processed/20210916_6949-20210916_6950-lys-ont-tape-8s/j_stream/xg-20210916_6949-20210916_6950-lys-ont-tape-8s-199p6mm.stream']
#streams = ['/asap3/petra3/gpfs/p11/2021/data/11010507/scratch_cc/galchenm/raw-processed/20210916_6944-20210916_6946-lys-ont-tape-2s/j_stream/xg-20210916_6944-20210916_6946-lys-ont-tape-2s-199p6mm.stream']

streams = ["/asap3/petra3/gpfs/p11/2021/data/11010507/scratch_cc/galchenm/raw-processed/20210916_6944-20210916_6946-lys-ont-tape-2s/j_stream/20210916_6944-20210916_6946-lys-ont-tape-2s-strong.stream", "/asap3/petra3/gpfs/p11/2021/data/11010507/scratch_cc/galchenm/raw-processed/20210916_6940-20210916_6941-lys-ont-tape-4s/j_stream/20210916_6940-20210916_6941-lys-ont-tape-4s-strong.stream", "/asap3/petra3/gpfs/p11/2021/data/11010507/scratch_cc/galchenm/raw-processed/20210916_6947-20210916_6948-lys-ont-tape-6s/j_stream/20210916_6947-20210916_6948-lys-ont-tape-6s-strong.stream", "/asap3/petra3/gpfs/p11/2021/data/11010507/scratch_cc/galchenm/raw-processed/20210916_6949-20210916_6950-lys-ont-tape-8s/j_stream/20210916_6949-20210916_6950-lys-ont-tape-8s-strong.stream"]
#colors = ['green','green','green','red', 'red', 'pink', 'pink']

#streams = ['/asap3/petra3/gpfs/p11/2021/data/11010507/scratch_cc/galchenm/raw-processed/20210916_6845-20210916_6846-lyso9/j_stream/xg-20210916_6845-20210916_6846-lyso9-199p6mm.stream', '/asap3/petra3/gpfs/p11/2021/data/11010507/scratch_cc/galchenm/raw-processed/20210916_6847-20210916_6848-lyso10/j_stream/xg-20210916_6847-20210916_6848-lyso10-199p6mm.stream', '/asap3/petra3/gpfs/p11/2021/data/11010507/scratch_cc/galchenm/raw-processed/20210916_6850-20210916_6851-lyso5/j_stream/xg-20210916_6850-20210916_6851-lyso5-199p6mm.stream', '/asap3/petra3/gpfs/p11/2021/data/11010507/scratch_cc/galchenm/raw-processed/20210916_6854-20210916_6856-lyso7/j_stream/xg-20210916_6854-20210916_6856-lyso7-199p6mm.stream']
#streams = ['/asap3/petra3/gpfs/p11/2021/data/11010507/scratch_cc/galchenm/raw-processed/20210916_6963-lyso9/j_stream/xg-20210916_6963-lyso9-199p6mm.stream','/asap3/petra3/gpfs/p11/2021/data/11010507/scratch_cc/galchenm/raw-processed/20210916_6847-20210916_6848-lyso10/j_stream/xg-20210916_6847-20210916_6848-lyso10-199p6mm.stream', '/asap3/petra3/gpfs/p11/2021/data/11010507/scratch_cc/galchenm/raw-processed/20210916_6850-20210916_6851-lyso5/j_stream/xg-20210916_6850-20210916_6851-lyso5-199p6mm.stream', '/asap3/petra3/gpfs/p11/2021/data/11010507/scratch_cc/galchenm/raw-processed/20210916_6854-20210916_6856-lyso7/j_stream/xg-20210916_6854-20210916_6856-lyso7-199p6mm.stream']
colors = ['green', 'red', 'orange', 'blue']

xxmin = 1e10
xxmax = -1e10
yymin = 1e10
yymax = -1e10


if args.rmin is not None:
    xxmin = args.rmin
if args.rmax is not None:
    xxmax = args.rmax
if args.imin is not None:
    yymin = args.imin
if args.imax is not None:
    yymax = args.imax

for stream in streams:

    data = []
    n=0
    in_list = 0
    cell = []

    with open(stream, 'r') as f:
        
        for line in f:

            if line.find("Cell parameters") != -1:
                cell[0:3] = line.split()[2:5]
                cell[3:6] = line.split()[6:9]
                continue
            if line.find("Reflections measured after indexing") != -1: #if line.find("Reflections measured after indexing") != -1:
                in_list = 1
                continue
            if line.find("End of reflections") != -1:
                in_list = 0
            if in_list == 1:
                in_list = 2
                continue
            elif in_list != 2:
                continue

            # From here, we are definitely handling a reflection line

            # Add reflection to list
            columns = line.split()
            n += 1
            try:
                data.append([resolution(cell, columns[0:3]),columns[5]])
            except:
                print("Error with line: "+line.rstrip("\r\n"))
                print("Cell: "+str(cell))

            if n%1000==0:
                sys.stdout.write(f'\r {os.path.basename(stream)} %i predicted reflections found' % n)
                sys.stdout.flush()

            if n >= args.nmax:
                break

    print('here\n')
    bins=300

    data = np.asarray(data,dtype=float)

    sys.stdout.write("\r%i predicted reflections found\n" % n)
    sys.stdout.flush()

    x = data[:,0] #resolution 
    y = data[:,1] #reflections

    xmin = np.min(x[x>0])
    xmax = np.max(x)
    ymin = np.min(y[y>0])
    ymax = np.max(y)



    keepers = np.where((x>=xmin) & (x<=xmax) & (y>=ymin) & (y<=ymax))

    x = x[keepers]
    y = y[keepers]

    hist_x, xbin_edges = np.histogram(x, bins=bins)
    xcenters = (xbin_edges[:-1] + xbin_edges[1:]) / 2

    step = (np.max(xcenters) - np.min(xcenters))/ len(xcenters)

    Intensity = np.array([])
    real_x = np.array([])
    for i in range(0,len(xcenters)):
        current_int = np.array(np.nanmedian(np.where(np.abs(x - xcenters[i]) <= step, y, np.nan)))
        
        if not np.isnan(current_int):
            Intensity = np.append(Intensity, current_int)
            real_x = np.append(real_x, np.array(xcenters[i]))

    plt.plot(real_x, Intensity, label=os.path.basename(stream).split('.')[0])
    xxmin = np.min(real_x) if np.min(real_x) < xxmin else xxmin
    xxmax = np.max(real_x) if np.max(real_x) > xxmax else xxmax
    yymin = np.min(Intensity) if np.min(Intensity) < yymin else yymin 
    yymax = np.max(Intensity) if np.max(Intensity) > yymax else yymax
    print('finish')
    

plt.xlim([xxmin,xxmax])
plt.ylim([yymin,yymax])
plt.xlabel("1/d (A^-1)")
plt.ylabel("<I>")
plt.legend(prop ={'size': 10}) 


plt.show()




