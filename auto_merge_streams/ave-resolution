#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Find mean diffracting resolution
#
# Copyright Â© 2014-2020 Deutsches Elektronen-Synchrotron DESY,
#                       a research centre of the Helmholtz Association.
#
# Author:
#    2014-2017 Thomas White <taw@physics.org>
#

import sys
import numpy as np
import matplotlib.pyplot as plt
import os

stream_filename = sys.argv[1]


f = open(stream_filename)

a = []

while True:
    fline = f.readline()
    if not fline:
        break
    if fline.find("diffraction_resolution_limit") != -1:
        res = float(fline.split('= ')[1].split(' ')[0].rstrip("\r\n"))
        a.append(res)
        continue

f.close()


path_to_plots = os.path.join(os.path.dirname(stream_filename), 'plots_res')

if not os.path.exists(path_to_plots):
    os.mkdir(path_to_plots)

output = os.path.join(path_to_plots, os.path.basename(stream_filename).split('.')[0]+'-ave-resolution.png')

b = np.array(a)
'''
print(" Mean: {:.2} nm^-1 = {:.2} A".format(numpy.mean(b),10.0/numpy.mean(b)))
print(" Best: {:.2} nm^-1 = {:.2} A".format(numpy.max(b),10.0/numpy.max(b)))
print("Worst: {:.2} nm^-1 = {:.2} A".format(numpy.min(b),10.0/numpy.min(b)))
print("Std deviation: {:.2} nm^-1".format(numpy.std(b)))

plt.hist(a,bins=30)
plt.title('Resolution based on indexing results')
plt.xlabel('Resolution / nm^-1')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()
'''

try:
    print("Mean: {:.2} nm^-1 = {:.2} A".format(np.mean(b),10.0/np.mean(b)))
    print("Best: {:.2} nm^-1 = {:.2} A".format(np.max(b),10.0/np.max(b)))
    print("Worst: {:.2} nm^-1 = {:.2} A".format(np.min(b),10.0/np.min(b)))
    print("Std deviation: {:.2} nm^-1".format(np.std(b)))

    fig3 = plt.figure()
    plt.hist(a,bins=30)
    plt.title('Resolution based on indexing results')
    plt.xlabel('Resolution / nm^-1')
    plt.ylabel('Frequency')
    plt.grid(True)
    #plt.show()
    fig3.savefig(output)
except ValueError:
    print(f'No ave-res pic for {os.path.basename(stream_filename)}')
